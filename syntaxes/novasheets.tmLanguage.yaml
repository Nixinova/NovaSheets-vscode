name: NovaSheets
scopeName: source.novasheets
fileTypes:
  - '.nvss'

patterns:
  - include: '#novasheets'
  - include: '#css'
  - include: '#chars'

repository:
  novasheets:
    patterns:
      - include: '#declarations'
      - include: '#substitutions'
      - include: '#objects'
      - include: '#comments'
      - include: '#loop-identifier'

  css:
    patterns:
      - include: '#selectors'
      - include: '#at-rules'
      - include: '#functions'
      - include: '#block'

  declarations:
    patterns:
      # Variable declaration
      - name: meta.function.novasheets
        begin: '(@var)\s+([^=|]+)'
        beginCaptures:
          1: { name: keyword.control.declaration.function.novasheets }
          2: { name: variable.other.constant.novasheets }
        end: '=|$'
        endCaptures:
          0: { name: constant.character.variable.declaration.end.novasheets }
        patterns:
          - name: meta.function.parameters.novasheets
            match: '(\|)([^=|]+)'
            captures:
              1: { name: constant.character.parameter.begin.novasheets }
              2: { name: variable.parameter.novasheets }

      # Variable ending
      - name: keyword.control.variable.ending.novasheets
        match: '@endvar'

      # Parser constant
      - name: meta.preprocessor.novasheets
        match: '(@option)\s+([A-Z_]+)\s+(?=\d+|true|false)'
        captures:
          1: { name: keyword.control.declaration.option.novasheets }
          2: { name: variable.parameter.option.novasheets }

  substitutions:
    patterns:
      # Variables
      - name: meta.function-call.novasheets
        begin: '(\$\()\s*(?:(@[^=|)]+)|([^=|)]+))'
        beginCaptures:
          1: { name: constant.character.variable.begin.novasheets }
          2: { name: support.type.function.builtin.novasheets }
          3: { name: variable.other.constant.novasheets }
        end: '\)'
        endCaptures:
          0: { name: constant.character.variable.end.novasheets }
        patterns:
          - name: meta.function-call.parameter.novasheets
            match: '(\|)\s*([^=|]+)\s*(=)'
            captures:
              1: { name: constant.character.separator.parameter.novasheets }
              2: { name: variable.parameter.novasheets }
              3: { name: constant.character.accessor.parameter.novasheets }
            patterns:
              - name: variable.parameter.novasheets
                match: '[^=|]+'
          - include: '#novasheets'
          - include: '#css'
          - include: '#chars'
          - name: string.regexp.novasheets
            begin: '(?<!\\)/'
            end: '(?<!\\)/[gimusy]?(?=\s|\b)'

      # Parameters
      - name: meta.block.parameter.novasheets
        begin: '\$\['
        beginCaptures:
          0: { name: constant.character.parameter.begin.novasheets }
        end: '\]'
        endCaptures:
          0: { name: constant.character.parameter.end.novasheets }
        patterns:
          - name: variable.parameter.novasheets
            begin: '(?<=\[)'
            end: '(?=\]|(\|))'
            endCaptures:
              0: { name: punctuation.separator.parameter.novasheets }

  objects:
    patterns:
      # Block substitutions
      - name: meta.block.substitution.novasheets
        begin: '\$<'
        beginCaptures:
          0: { name: constant.character.substitution.begin.novasheets }
        end: '>'
        endCaptures:
          0: { name: constant.character.substitution.end.novasheets }
        patterns:
          - name: entity.name.tag.css.substitution.novasheets
            match: '[^>]+'

      # Attribute retrieval
      - name: meta.block.attribute.novasheets
        begin: '<'
        beginCaptures:
          0: { name: constant.character.substitution.begin.novasheets }
        end: '>'
        endCaptures:
          0: { name: constant.character.substitution.end.novasheets }
        patterns:
          - name: entity.other.attribute-name.novasheets
            match: '[^>]+'

  loop-identifier:
    patterns:
      - name: constant.character.identifier.loop.novasheets
        begin: '\$v(\[)'
        beginCaptures:
          0: { name: punctuation.definition.identifier.begin.novasheets }
        end: '\]'
        endCaptures:
          0: { name: punctuation.definition.identifier.end.novasheets }
      - name: constant.character.identifier.loop.novasheets
        match: '\$i|\$v'

  comments:
    patterns:
      # Inline comment
      - name: comment.line.double-slash.novasheets
        begin: '(?<![a-z]:)//'
        end: '$'

      # Block comment
      - name: comment.block.css
        begin: '/\*(?![\[/])'
        end: '(?<![/\]])\*/'

      # Static comment
      - name: meta.block.comment.static.novasheets
        begin: '/\*/'
        beginCaptures:
          0: { name: comment.block.parser.novasheets }
        end: '/\*/'
        endCaptures:
          0: { name: comment.block.parser.novasheets }

      # Parsed comment
      - name: comment.block.parser.novasheets
        match: '/\*\[|\]\*/'

  selectors:
    patterns:
      - name: meta.selector.novasheets
        begin: '(?<!@[^$@{}])^(?=\s*[A-Za-z&%,.#:+~>\[\]])(?![^}]*$)'
        end: '(?=\{)'
        patterns:
          # Element
          - name: entity.name.tag.css.selector.element.css
            match: '(?<=\s|^|,)[A-Za-z]+[0-9]?(?=\s|[\[,.#:+~>])'
          # Class
          - name: entity.name.tag.css.selector.class.css
            match: '(\.)(?>\\\s|[^\s,.#:+~>\[\]])+'
            captures:
              1: { name: punctuation.accessor.selector.class.css }
          # ID
          - name: entity.name.tag.css.selector.id.css
            match: '(#)[^\s,.#:+~>\[\]]+'
            captures:
              1: { name: punctuation.accessor.selector.id.css }
          # Pseudo-element/class
          - name: entity.name.tag.css.selector.pseudo.css
            match: '(::?)[^\s,.#:+~>\[\]]+'
            captures:
              1: { name: punctuation.accessor.selector.pseudo.css }
          # Attributes
          - name: entity.name.tag.css.selector.attribute.css
            begin: '\['
            beginCaptures:
              0: { name: punctuation.accessor.selector.attribute.begin.css }
            end: '\]'
            endCaptures:
              0: { name: punctuation.accessor.selector.attribute.end.css }
          # Function
          - name: entity.name.tag.css.selector.function.css
            begin: '\('
            beginCaptures:
              0: { name: punctuation.accessor.selector.function.begin.css }
            end: '\)'
            endCaptures:
              0: { name: punctuation.accessor.selector.function.end.css }
          # Sliced parts
          - name: entity.name.tag.css.selector.sliced.css
            match: '(?<=&|%)\S+'
          # Wildcard
          - name: constant.character.wildcard.css
            match: '\*'
          # Comma
          - name: punctuation.separator.selector.css
            match: ','
          # Breakpoint
          - name: keyword.control.breakpoint.novasheets
            match: '@|\.{2,}'
          # Parent selector
          - name: constant.character.selector.parent.novasheets
            match: '&'
          # Previous selector
          - name: constant.character.selector.previous.novasheets
            match: '%'
          # Other
          - include: '#novasheets'
          - include: '#chars'

  block:
    name: meta.block.css
    begin: '{'
    beginCaptures:
      0: { name: punctuation.definition.block.begin.css }
    end: '}'
    endCaptures:
      0: { name: punctuation.definition.block.end.css }
    patterns:
      # Attribute
      - name: meta.language.attribute.name.css
        match: '(?<=[;{])\s*([\w-]+)\s*(:)'
        captures:
          1: { name: entity.other.attribute-name.css }
          2: { name: punctuation.terminator.attribute.name.end.css }
      # Value
      - name: meta.language.attribute.value.css
        begin: '(?<=[{:;])'
        end: ';|(?=})'
        endCaptures:
          0: { name: punctuation.terminator.attribute.value.end.css }
        patterns:
          - include: '#novasheets'
          - include: '#functions'
          - include: '#chars'

  at-rules:
    patterns:
      - name: keyword.control.function.at-rule.css
        match: '@[\w-]+'

  functions:
    patterns:
      - name: meta.function-call.css
        begin: '([\w-]+)(?=(\())'
        beginCaptures:
          1: { name: entity.name.function.css }
          2: { name: punctuation.definition.function.end.css }
        end: '\)'
        endCaptures:
          0: { name: punctuation.definition.function.end.css }
        patterns:
          - include: '#novasheets'
          - include: '#chars'

  chars:
    patterns:
      # Strings
      - name: string.quoted.double.css
        begin: '(?<!\\)"'
        beginCaptures:
          0: { name: punctuation.definition.string.begin.css }
        end: '(?<!\\)"'
        endCaptures:
          0: { name: punctuation.definition.string.end.css }
      - name: string.quoted.single.css
        begin: '(?<!\\)'''
        beginCaptures:
          0: { name: punctuation.definition.string.begin.css }
        end: '(?<!\\)'''
        endCaptures:
          0: { name: punctuation.definition.string.end.css }

      # Numbers
      - name: constant.numeric.css
        match: '[+-]?[0-9]+(?:\.[0-9]+)?'

      # Units
      - name: constant.numeric.unit.css
        match: '(?<=[\d.])(%|em|rem|en|ex|vw|vh|px|pt|pc|cm|mm|m|ft|in|s|ms|deg)(?!\w)'

      # Important
      - name: storage.modifier.important.css
        match: '!\s*important'

      # Math operations
      - name: keyword.operator.math.novasheets
        match: '(?<=[.\d])\s*[-+*/^e](?=\s*[-.\d])'

      # Boolean operations
      - name: keyword.operator.boolean.novasheets
        match: '!|[|][|]|&&|\bn?and\b|\bx?n?or\b'
      - name: constant.language.boolean.novasheets
        match: 'true|false'

      # Colors
      - name: string.other.color.css
        match: '#[A-Fa-f0-9]{3,8}'
