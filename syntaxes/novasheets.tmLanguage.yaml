# compiles to .json
name: NovaSheets
scopeName: source.novasheets
fileTypes:
  - ".nvss"
patterns:
  - include: "#variables"
  - include: "#objects"
  - include: "#parser_constant"
  - include: "#simple_breakpoint"
  - include: "#loop_identifier"
  - include: "#comments"
  - include: "#css"
  - include: "#other"

repository:

  variables:
    patterns:
      - include: "#variable_declaration"
      - include: "#variable_ending"
      - include: "#variable"
      - include: "#parameter"

  variable_declaration:
    match: "(@var)\\s+((?:[^|=)\\]](?!\\/\\/))+)(\\|(?:[^=)\\]](?!\\/\\/))+)*(=?)"
    captures:
      '1': { name: keyword.variable.declarator.novasheets }
      '2': { name: support.type.variable.default.novasheets }
      '3': { name: keyword.control.variable.attribute.novasheets }
      '4': { name: keyword.variable.declarator.novasheets }

  variable_ending:
    match: "@endvar"
    name: keyword.variable.ending.declarator.novasheets

  variable:
    begin: "(\\$\\()"
    beginCaptures:
      '1': { name: constant.character.novasheets }
    end: "(\\))"
    endCaptures:
      '1': { name: constant.character.novasheets }
    patterns:
      # Variable name
      - match: "(?<=\\()\\s*(@)?([^|=)]+)(?=\\)|\\|)"
        captures:
          '1': { name: keyword.other.unit.variable.default.novasheets }
          '2': { name: support.type.variable.default.novasheets }
      # Parameter
      - match: "(?<!@.*)[^|=]+?(?==)"
        name: keyword.control.variable.attribute.novasheets
      # Punctuation
      - match: "\\|+|(?<!@.*|=)="
        name: constant.character.novasheets
      - include: "#variable"
      - include: "#parameter"
      - include: "#loop_identifier"
      - include: "#css"
      - include: "#other"

  parameter:
    match: "(\\$\\[)(.+?)(\\|(.*?))?(?:(\\s//.+$)|(\\]))"
    captures:
      '1': { name: constant.character.novasheets }
      '2': { name: keyword.control.variable.attribute.novasheets }
      '3': { name: constant.character.novasheets }
      '4': { name: constant.character.escape.default_argument.novasheets }
      '5': { name: comment.inline.novasheets }
      '6': { name: constant.character.novasheets }

  objects:
    patterns:

      # Declaration substitution
      - match: "(\\$<)([\\s\\w.:~+>()]+)(>)"
        #example: $<.selector>
        captures:
          '1': { name: constant.character.novasheets }
          '2': { name: entity.other.attribute-name.class.css }
          '3': { name: constant.character.novasheets }

      # Object getter
      - match: "(?<=>|})\\s*(\\<)(\\w+?)(\\>)"
        #example: <font-size>
        captures:
          '1': { name: constant.character.novasheets }
          '2': { name: support.type.property-name.css }
          '3': { name: constant.character.novasheets }

  parser_constant:
    match: "(@option)(?:(\\s+[A-Z_]+)(\\s+(?:[0-9]+|true|false)))?"
    #example: @option CONST_NAME true
    captures:
      '1': { name: keyword.variable.declarator.novasheets }
      '2': { name: support.type.constant..parsernovasheets }
      '3': { name: keyword.control.constant.parser.value.novasheets }

  simple_breakpoint:
    match: "(@(?!\\w))|\\.{2,}"
    captures:
      '1': { name: keyword.control.at-rule }
      '2': { name: constant.character.novasheets }

  loop_identifier:
    match: "\\$i|\\$v\\[?|(?<=\\$v\\[[^\\]]*?)\\]"
    name: keyword.variable.identifier.loop.novasheets

  comments:
    patterns:

      # Inline
      - match: "(?<![a-z]+:)//.*$"
        name: comment.inline.novasheets

      # Static
      - match: "(/\\*/)(.*?)(/\\*/)"
        captures:
          '1': { name: comment.static.novasheets }
          '2': { name: markup.italic.content.novasheets }
          '3': { name: comment.static.novasheets }

      # Parsed
      - match: "(/\\*\\[|\\]\\*/)"
        name: comment.block.css

      # Block
      - match: "/\\*.*?\\*/"
        name: comment.block.css

  css:
    patterns:

      # URL
      - match: "[a-z]+://\\w+(\\.\\w+)+(/[^\\s)]+)?"
        name: string.unquoted markup.underline.link
  
      # Selector
      - match: "(?<!@[^$@{}]*)([^$@{}]+)(?=\\{|@[^{]+\\{)"
        name: entity.other.attribute-name.class.css

      # Function
      - match: "(?<!@)[\\w-]+(?=\\s*\\()"
        name: support.function.css

      # At-rule
      - match: "(?<!\\()@[\\w-]+"
        name: keyword.control.at-rule
      
      # Property
      - match: "([a-z-]+?(?!\\\\))\\s*:(?!//)"
        captures:
          '1': { name: support.type.property-name.css }

      # !important
      - match: "!\\s*important"
        name: string.regexp.important.css

  other:
    patterns:

      # @bitwise keywords
      - match: "(?<=\\$\\(\\s*@(?:bitwise|boolean|if)[^)]+)(&|\\||!|not|&|and|nand|or|nor|xor|xnor)"
        name: support.function.bitwise.novasheets

      # Bracket matching
      - match: "(?<!\\$)\\([^)]*?\\)"
        name: meta.brackets.novasheets

      # String
      - match: "'[^']*?[^\\\\]'|\"[^\"]*?[^\\\\]\"|\"\"|''"
        name: string.quoted.novasheets

      # Boolean
      - match: "\\b(true|false)\\b"
        name: keyword.constant.logic.novasheets

      # Hex color
      - match: "#[0-9a-fA-F]{8}(?![0-9a-fA-F])|#[0-9a-fA-F]{6}(?![0-9a-fA-F])|#[0-9a-fA-F]{3,4}(?![0-9a-fA-F])"
        name: string.unquoted.color.hash.css
      - match: "#[0-9a-fA-F]{9,}|#[0-9a-fA-F]{7}|#[0-9a-fA-F]{5}|#[0-9a-fA-F]{1,2}"
        name: invalid.color.hash.css

      # Unit
      - match: "(?<=\\d\\s*)(em|rem|en|ex|px|pt|pc|cm|mm|m|ft|in|%)\\b"
        name: constant.numeric.unit.css

      # Number
      - match: "\\d+e-?\\d+"
        name: constant.numeric.css
      - match: "0x[0-9a-f]*\\.?[0-9a-f]+|0b[01]*\\.?[01]+|0o[0-7]*\\.?[0-7]+|[0-9]*\\.?[0-9]+"
        name: constant.numeric.css

      # Character
      - match: "[-:;,.+~^*/!%(){}\\w]"
        name: entity.constant.character
